GetStatIncrease:
    080295E0 B510   PUSH {r4,lr}   //GetStatIncrease
    080295E2 2400   MOV r4, #0x0
    080295E4 2864   CMP r0, #0x64
    080295E6 DD03   BLE #0x80295F0
        080295E8 3401   ADD r4, #0x1
        080295EA 3864   SUB r0, #0x64
        080295EC 2864   CMP r0, #0x64
        080295EE DCFB   BGT #0x80295E8
    080295F0 F7D7 FC36   BL 0x08000E60   //Roll1RN
    080295F4 0600   LSL r0 ,r0 ,#0x18
    080295F6 2800   CMP r0, #0x0
    080295F8 D000   BEQ #0x80295FC
        080295FA 3401   ADD r4, #0x1
    080295FC 1C20   MOV r0 ,r4
    080295FE BC10   POP {r4}
    08029600 BC02   POP {r1}
    08029602 4708   BX r1

# Supply the allegiance byte for the unit in r0.
# r0 will then return the character struct for that unit
GetUnitStruct:
    08018D0C 4A03   ldr r2, [pc, #0xc] # pointer:08018D1C -> 08B92EB0 (RAMSlotTable This is a table of pointers, with one for every deployment slot in RAM )   //GetUnitStruct
    08018D0E 21FF   mov r1, #0xff
    08018D10 4001   and r1 ,r0
    08018D12 0089   lsl r1 ,r1 ,#0x2
    08018D14 1889   add r1 ,r1, r2
    08018D16 6808   ldr r0, [r1, #0x0] # pointer:08B92EB0 (RAMSlotTable This is a table of pointers, with one for every deployment slot in RAM ) -> 00000000
    08018D18 4770   bx lr

# Random number is chosen between 0-99 and is returned in r0
GetRandomNumber:
    08000E04 B580   push {r7,lr}   //geneateRN100 int
    08000E06 466F   mov r7, sp
    08000E08 F7FF FEEA   bl 0x08000be0   //geneateRN65536 int
    08000E0C 2264   mov r2, #0x64
    08000E0E 1C01   mov r1 ,r0
    08000E10 4351   mul r1 ,r2
    08000E12 1C08   mov r0 ,r1
    08000E14 2800   cmp r0, #0x0
    08000E16 DA01   bge #0x8000e1c
        08000E18 4902   ldr r1, [pc, #0x8] # pointer:08000E24 -> 0000FFFF
        08000E1A 1840   add r0 ,r0, r1
    08000E1C 1401   asr r1 ,r0 ,#0x10
    08000E1E 1C08   mov r0 ,r1
    08000E20 E002   b 0x8000e28
    08000E22 0000   nop
    08000E24 FFFF 0000   //LDRDATA
    08000E28 BC80   pop {r7}
    08000E2A BC02   pop {r1}
    08000E2C 4708   bx r1

# Returns 0 if the unit can't double or 1 if they can (in r0)
CanUnitDouble:
    0802903C B5F0   push {r4,r5,r6,r7,lr}   //BattleCheckDoubling
    0802903E 1C04   mov r4 ,r0
    08029040 1C0F   mov r7 ,r1
    08029042 480B   ldr r0, [pc, #0x2c] # pointer:08029070 -> 0203A470 (BattleUnit@gBattleTarget.CopyUnit )
    08029044 1C02   mov r2 ,r0
    08029046 325E   add r2, #0x5e
    08029048 2300   mov r3, #0x0
    0802904A 5ED1   ldsh r1, [r2, r3] # pointer:0203A4CE (BattleUnit@gBattleTarget.battleSpeed )
    0802904C 1C06   mov r6 ,r0
    0802904E 29FA   cmp r1, #0xfa
    08029050 DC2D   bgt #0x80290ae
        08029052 4808   ldr r0, [pc, #0x20] # pointer:08029074 -> 0203A3F0 (BattleUnit@gBattleActor.CopyUnit )
        08029054 1C01   mov r1 ,r0
        08029056 315E   add r1, #0x5e
        08029058 2500   mov r5, #0x0
        0802905A 5F4B   ldsh r3, [r1, r5] # pointer:0203A44E (BattleUnit@gBattleActor.battleSpeed )
        0802905C 2100   mov r1, #0x0
        0802905E 5E52   ldsh r2, [r2, r1] # pointer:0203A4CE (BattleUnit@gBattleTarget.battleSpeed )
        08029060 1A99   sub r1 ,r3, r2
        08029062 1C05   mov r5 ,r0
        08029064 2900   cmp r1, #0x0
        08029066 DB07   blt #0x8029078
            08029068 2903   cmp r1, #0x3   //Changing the Universal Doubling Threshold(attack speend)@ADDRESS
            0802906A DD20   ble #0x80290ae
                0802906C E007   b 0x802907e
                0802906E 0000   nop
    08029070 A470 0203   //LDRDATA
    08029074 A3F0 0203   //LDRDATA
            08029078 1AD0   sub r0 ,r2, r3
            0802907A 2803   cmp r0, #0x3   //Changing the Universal Doubling Threshold(attack speend)@ADDRESS
            0802907C DD17   ble #0x80290ae
                0802907E 1C28   mov r0 ,r5
                08029080 305E   add r0, #0x5e
                08029082 1C32   mov r2 ,r6
                08029084 325E   add r2, #0x5e
                08029086 2300   mov r3, #0x0
                08029088 5EC1   ldsh r1, [r0, r3] # pointer:0203A44E (BattleUnit@gBattleActor.battleSpeed )
                0802908A 2300   mov r3, #0x0
                0802908C 5ED0   ldsh r0, [r2, r3] # pointer:0203A4CE (BattleUnit@gBattleTarget.battleSpeed )
                0802908E 4281   cmp r1 ,r0
                08029090 DD02   ble #0x8029098
                    08029092 6025   str r5, [r4, #0x0]
                    08029094 603E   str r6, [r7, #0x0]
                    08029096 E001   b 0x802909c
                08029098 6026   str r6, [r4, #0x0]
                0802909A 603D   str r5, [r7, #0x0]
                0802909C 6820   ldr r0, [r4, #0x0]
                0802909E 304A   add r0, #0x4a
                080290A0 8800   ldrh r0, [r0, #0x0]
                080290A2 F7EE F9BF   bl 0x08017424   //GetItemWeaponEffect
                080290A6 2803   cmp r0, #0x3
                080290A8 D001   beq #0x80290ae
                    080290AA 2001   mov r0, #0x1
                    080290AC E000   b 0x80290b0
    080290AE 2000   mov r0, #0x0
    080290B0 BCF0   pop {r4,r5,r6,r7}
    080290B2 BC02   pop {r1}
    080290B4 4708   bx r1